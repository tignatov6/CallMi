# –§–∞–π–ª: main.py

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import sessionmaker, declarative_base, Session
import hashlib
import json
import asyncio
from datetime import datetime, timezone
from config import config

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
DATABASE_URL = config.DATABASE_URL
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()

class Room(Base):
    __tablename__ = "rooms"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)
    pwd_hash = Column(String, nullable=True)
    last_activity = Column(DateTime, default=lambda: datetime.now(timezone.utc))

Base.metadata.drop_all(bind=engine)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π

class RoomCreate(BaseModel):
    name: str
    password: str | None = None

class RoomPublic(BaseModel):
    id: int
    name: str
    has_password: bool

# --- FastAPI app –∏ REST API (–ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
app = FastAPI()

@app.get("/", response_class=HTMLResponse)
async def read_root():
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è index.html –∏ –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ static
    with open("static/index.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

def get_db():
    db = SessionLocal()
    try: yield db
    finally: db.close()

@app.post("/api/rooms", response_model=RoomPublic)
async def create_room(payload: RoomCreate, db: Session = Depends(get_db)):
    if db.query(Room).filter(Room.name == payload.name).first():
        raise HTTPException(400, "–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    pwd_hash = hashlib.sha256(payload.password.encode()).hexdigest() if payload.password else None
    room = Room(name=payload.name, pwd_hash=pwd_hash)
    db.add(room); db.commit(); db.refresh(room)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    await manager.notify_main_menu_users_room_list_changed("room_created")
    print(f"üè† –£–≤–µ–¥–æ–º–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: {room.name}")
    
    return RoomPublic(id=room.id, name=room.name, has_password=bool(pwd_hash))

@app.get("/api/rooms", response_model=list[RoomPublic])
def list_rooms(db: Session = Depends(get_db)):
    rooms = db.query(Room).all()
    return [RoomPublic(id=r.id, name=r.name, has_password=bool(r.pwd_hash)) for r in rooms]


# ‚îÄ‚îÄ‚îÄ –ù–û–í–´–ô –ú–ï–ù–ï–î–ñ–ï–† –°–û–ï–î–ò–ù–ï–ù–ò–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ConnectionManager:
    def __init__(self):
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {room_id: {peer_id: {"name": str, "ws": WebSocket}}}
        self.rooms: dict[int, dict[str, dict]] = {}
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {peer_id: {"name": str, "ws": WebSocket}}
        self.main_menu_users: dict[str, dict] = {}

    async def connect(self, room_id: int, peer_id: str, name: str, ws: WebSocket):
        await ws.accept()
        if room_id not in self.rooms:
            self.rooms[room_id] = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.update_room_activity(room_id)
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö, –∫—Ç–æ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        existing_peers = [{"id": pid, "name": p_data["name"]} for pid, p_data in self.rooms[room_id].items()]
        await ws.send_json({"type": "room_state", "payload": existing_peers})

        # 2. –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        await self.broadcast(room_id, {"type": "new_peer", "payload": {"id": peer_id, "name": name}}, exclude_id=peer_id)
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
        self.rooms[room_id][peer_id] = {"name": name, "ws": ws}

    async def disconnect(self, room_id: int, peer_id: str):
        if room_id in self.rooms and peer_id in self.rooms[room_id]:
            del self.rooms[room_id][peer_id]
            if not self.rooms[room_id]: # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–µ
                del self.rooms[room_id]
            else:
                # –°–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–º—Å—è, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª
                await self.broadcast(room_id, {"type": "peer_left", "payload": {"id": peer_id}})

    async def send_to_peer(self, room_id: int, peer_id: str, message: dict):
        if room_id in self.rooms and peer_id in self.rooms[room_id]:
            await self.rooms[room_id][peer_id]["ws"].send_json(message)

    async def broadcast(self, room_id: int, message: dict, exclude_id: str | None = None):
        if room_id in self.rooms:
            tasks = []
            for peer_id, peer_data in self.rooms[room_id].items():
                if peer_id != exclude_id:
                    tasks.append(peer_data["ws"].send_json(message))
            await asyncio.gather(*tasks)
    
    async def update_room_activity(self, room_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã"""
        db = SessionLocal()
        try:
            room = db.get(Room, room_id)
            if room:
                room.last_activity = datetime.now(timezone.utc)
                db.commit()
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã {room.name} (ID: {room_id})")
        finally:
            db.close()
    
    async def cleanup_empty_rooms(self):
        """–£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–ª–µ–µ config.ROOM_CLEANUP_TIMEOUT_SECONDS —Å–µ–∫—É–Ω–¥"""
        db = SessionLocal()
        rooms_deleted = False
        try:
            cutoff_time = datetime.now(timezone.utc).timestamp() - config.ROOM_CLEANUP_TIMEOUT_SECONDS
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
            all_rooms = db.query(Room).all()
            
            for room in all_rooms:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ç–æ-—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ
                has_users = room.id in self.rooms and len(self.rooms[room.id]) > 0
                
                if not has_users:
                    # –ö–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    last_activity_timestamp = room.last_activity.timestamp() if room.last_activity else 0
                    
                    if last_activity_timestamp < cutoff_time:
                        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É: {room.name} (ID: {room.id})")
                        db.delete(room)
                        rooms_deleted = True
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if room.id in self.rooms:
                            del self.rooms[room.id]
            
            db.commit()
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∫–æ–º–Ω–∞—Ç—ã, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            if rooms_deleted:
                await self.notify_main_menu_users_room_list_changed("room_deleted")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–Ω–∞—Ç: {e}")
            db.rollback()
        finally:
            db.close()
    
    def add_main_menu_user(self, peer_id: str, name: str, ws):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.main_menu_users[peer_id] = {"name": name, "ws": ws}
        print(f"üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    def remove_main_menu_user(self, peer_id: str):
        """–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if peer_id in self.main_menu_users:
            user_name = self.main_menu_users[peer_id]["name"]
            del self.main_menu_users[peer_id]
            print(f"üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª–µ–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    
    async def notify_main_menu_users_room_list_changed(self, event_type="room_updated"):
        """–£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç"""
        if self.main_menu_users:
            event_emojis = {
                "room_created": "üè†",
                "room_deleted": "üóëÔ∏è",
                "room_updated": "üîÑ"
            }
            emoji = event_emojis.get(event_type, "üì¢")
            print(f"{emoji} –£–≤–µ–¥–æ–º–ª—è–µ–º {len(self.main_menu_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–æ–±—ã—Ç–∏–∏: {event_type}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
            message = {"type": "rooms_updated", "event": event_type}
            tasks = []
            
            for peer_id, user_data in list(self.main_menu_users.items()):
                try:
                    tasks.append(user_data["ws"].send_json(message))
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {peer_id}: {e}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    self.remove_main_menu_user(peer_id)
            
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

manager = ConnectionManager()

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç
async def cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—ã–µ config.ROOM_CLEANUP_INTERVAL_SECONDS —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            await asyncio.sleep(config.ROOM_CLEANUP_INTERVAL_SECONDS)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ config.ROOM_CLEANUP_INTERVAL_SECONDS —Å–µ–∫—É–Ω–¥
            await manager.cleanup_empty_rooms()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(cleanup_task())
    print(f"üöÄ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç –∑–∞–ø—É—â–µ–Ω–∞")
    print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: —Ç–∞–π–º–∞—É—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç - {config.ROOM_CLEANUP_TIMEOUT_SECONDS}—Å, –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ - {config.ROOM_CLEANUP_INTERVAL_SECONDS}—Å")

# ‚îÄ‚îÄ‚îÄ WebSocket –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.websocket("/main-menu/{peer_id}/{user_name}")
async def main_menu_websocket(ws: WebSocket, peer_id: str, user_name: str):
    await ws.accept()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    manager.add_main_menu_user(peer_id, user_name, ws)
    
    try:
        while True:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await ws.receive_text()
    except WebSocketDisconnect:
        manager.remove_main_menu_user(peer_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        manager.remove_main_menu_user(peer_id)

# ‚îÄ‚îÄ‚îÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô WebSocket-—Å–∏–≥–Ω–∞–ª–∏–Ω–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.websocket("/ws/{room_id}/{peer_id}/{user_name}")
async def websocket_endpoint(ws: WebSocket, room_id: int, peer_id: str, user_name: str):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    db = SessionLocal()
    room = db.get(Room, room_id)
    if not room:
        await ws.accept()
        await ws.close(code=4004, reason="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        db.close()
        return
    
    if room.pwd_hash:
        # –ü–∞—Ä–æ–ª—å —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ query-–ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        # ws://.../ws/1/peer123/MyName?password=mypass
        try:
            pwd = ws.query_params.get('password', '')
            client_pwd_hash = hashlib.sha256(pwd.encode()).hexdigest()
            if room.pwd_hash != client_pwd_hash:
                await ws.accept()
                await ws.close(code=4000, reason="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                db.close()
                return
        except Exception:
            await ws.accept()
            await ws.close(code=4001, reason="–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            db.close()
            return
    db.close()

    # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await manager.connect(room_id, peer_id, user_name, ws)

    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            data = await ws.receive_json()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if data.get("type") == "refresh_users":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
                existing_peers = [{"id": pid, "name": p_data["name"]} for pid, p_data in manager.rooms[room_id].items()]
                await ws.send_json({"type": "room_state", "payload": existing_peers})
                continue
            
            # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {"to_id": "...", "type": "sdp" | "ice", "payload": {...}}
            to_id = data.get("to_id")
            if to_id:
                # –î–æ–±–∞–≤–ª—è–µ–º, –æ—Ç –∫–æ–≥–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                data["from_id"] = peer_id
                await manager.send_to_peer(room_id, to_id, data)
                
    except WebSocketDisconnect:
        await manager.disconnect(room_id, peer_id)
